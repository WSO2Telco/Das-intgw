<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {

    include("../HubAnalytics-Gadget-Commons/controller-util.jag");

    response.contentType = 'application/json';
    var PROVIDER_CONF = 'provider-conf';
    var PROVIDER_NAME = 'provider-name';
    var FILE_NAME = FILE_NAMES.TRAFFIC_REPORT;

    var action = request.getParameter("action");
    var filter = request.getParameter("filter");
    var data = request.getContent();
    var providerConf = data[PROVIDER_CONF];

    var carbon = require('carbon');
    var user = session.get('user');
    var userRealmService = carbon.server.osgiService('org.wso2.carbon.user.api.UserRealmService');
    var tenantId = userRealmService.getTenantManager().getTenantId(user.domain);
    var userRealm = userRealmService.getTenantUserRealm(tenantId);
    var userStore = userRealm.getUserStoreManager();
    var department = userStore.getUserClaimValue(user.username, 'http://wso2.org/claims/department', null);

    var role = "";
    var serviceProvider = "";

    var log = new Log();

    for (var i =0; i < user.roles.length; i++) {
        if (user.roles[i] == "admin" || user.roles[i] == "internal-gateway-admin") {
            role = "admin";
            break;
        } else if(user.roles[i] == "business-unit-viewer"){
            role = "viewer";
        } else if(user.roles[i] == "Internal/subscriber" && role != "viewer"){
            role = "serviceProvider";
            serviceProvider = user.username+"@"+user.domain;
        }
    }

    if (action === 'getSchema') {
        log.info("providerConf[PROVIDER_NAME] => "+providerConf[PROVIDER_NAME]);
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
        print(providerAPI.getSchema(providerConf));
        return;
    } else if(action === 'getData'){
        log.info("providerConf[PROVIDER_NAME] => "+providerConf[PROVIDER_NAME]);
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
        providerConf.query = "";
        //Check logged in user role and decide which operators to load
        var all = true;
        var currentOperator;


        if (providerConf[PROVIDER_NAME] == "batch") {
            var timeRangeUtil = Packages.org.wso2.analytics.shared.util.time.TimeRangeUtils;
            var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(data.dateStart, data.dateEnd);
            timeUnit = (( timeUnit == 'MINUTE') || ( timeUnit == 'SECOND'))?'HOUR':timeUnit;
            var tableName = providerConf.tableName + timeUnit;
            providerConf.query += "eventTimeStamp:["+data.dateStart+" TO "+data.dateEnd+"]";
            if (data.operator != "0" && data.operator != undefined) {
                providerConf.query +=  " AND operatorId:"+ data.operator;
            }
            log.info("data.operator => "+data.operator+"  => "+providerConf.query);
            if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
                providerConf.query +=  " AND serviceProviderId:"+ "\""+ data.serviceProvider+ "\"";
            }
            log.info("data.serviceProvider => "+data.serviceProvider+"  => "+providerConf.query);
            if (data.applicationName != "0" && data.applicationName != undefined) {
                providerConf.query +=  " AND applicationId:"+ data.applicationName;
            }
            log.info("data.applicationName => "+data.applicationName+"  => "+providerConf.query);
            if (data.api != "0" && data.api != undefined) {
                providerConf.query +=  " AND apiID:"+ data.api;
            }
            log.info("data.api => "+data.api+"  => "+providerConf.query);
            providerConf.tableName = tableName;
        }else if (providerConf[PROVIDER_NAME] == "operator") {
            if (data.operator != "0" && data.operator != "(0)" && data.operator != undefined) {
                providerConf.query +=  "operatorId:"+ data.operator;
                all = false;
            }
        }else if(providerConf[PROVIDER_NAME] == "sp") {
            if(data.serviceProvider != "0" && data.serviceProvider != "(0)" && data.operator != undefined){
                providerConf.query +=  "serviceProviderId:"+ data.serviceProvider;
                all = false;
            }
        }
        else if(providerConf[PROVIDER_NAME] == "app") {
            if(data.applicationId!="()" && data.applicationId!="0" && data.applicationId!="(0)" && data.operator != undefined){
                providerConf.query +=  "applicationId:"+ data.applicationId;
                all = false;
            } else if (data.applicationId =="(0)" && data.operator != undefined && data.serviceProvider != "(0)" && data.serviceProvider != "0") {
                providerConf.query += "serviceProviderId:"+ "\""+ data.serviceProvider+ "\"";
            }
        }

        var andSign = '';
        if((role != "admin" &&  all == false) || (providerConf[PROVIDER_NAME] == "batch")){
            andSign =  ' AND ';
        }
        log.info("role => "+role+"    providerConf[PROVIDER_NAME] =>"+providerConf[PROVIDER_NAME] +"  "+(providerConf[PROVIDER_NAME] == "sp" || providerConf[PROVIDER_NAME] == "batch"));

        if(role =="viewer" && providerConf[PROVIDER_NAME] != "batch" ){
            providerConf.tableName = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_API_SUMMARY";
            providerConf.query +=  andSign +' department:"'+department+'"';
            print(providerAPI.getData(providerConf));
            return;
        }
        else if(role =="viewer" && providerConf[PROVIDER_NAME] == "batch"){
            providerConf.query +=  andSign +' department:"'+department+'"';


        }else if(role =="serviceProvider" && (providerConf[PROVIDER_NAME] == "operator" || providerConf[PROVIDER_NAME] == "sp")){
            var serviceProviderName = user.username +"@"+ user.domain;
            providerConf.query +=  andSign +' _serviceProvider:"'+serviceProviderName+'"';
            providerConf.tableName = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_API_SUMMARY";
            print(providerAPI.getData(providerConf));
            return;

        }else if(role =="serviceProvider"){
            var serviceProviderName = user.username +"@"+ user.domain;
            providerConf.query +=  andSign +' _serviceProvider:"'+serviceProviderName+'"';

        }else if(role =="publisher" && (providerConf[PROVIDER_NAME] == "operator" || providerConf[PROVIDER_NAME] == "batch")){
            providerConf.query +=  andSign +' _serviceProvider:"'+serviceProvider+'"';
        }
        log.info("query === > " + providerConf.query);
        print(providerAPI.getData(providerConf));

        return;
    }
    else if (user != null) {

        var userReportDirectory = "/reports/traffic/" + user.username + "/";;
        var directory = "repository/deployment/server/jaggeryapps/portal" + userReportDirectory;
        var reportPrefix = user.username + FILE_NAME;

        if(role == ""){
            print({'message': 'Not Allowed!'});
            return;
        }


        if (action == "generateCSV") {

            var fileAppend = getFileAppend(data);
            var carbon = require('carbon');
            //removeAllFiles(userReportDirectory, reportPrefix);
            var service = service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');

            var timeRangeUtil = Packages.org.wso2.analytics.shared.util.time.TimeRangeUtils;
            var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(data.dateStart, data.dateEnd);
            timeUnit = (( timeUnit == 'MINUTE') || ( timeUnit == 'SECOND'))?'HOUR':timeUnit;
            var tableName = providerConf.tableName  + timeUnit;
            providerConf.query += "eventTimeStamp:["+data.dateStart+" TO "+data.dateEnd+"]";
            providerConf.tableName = tableName;

            var reportMaxLength = 10;


            var providerConf = data[PROVIDER_CONF];
            var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
            log.info('providerConf[PROVIDER_NAME] ' + providerConf[PROVIDER_NAME]);



            if (data.operator != "0" && data.operator != undefined) {
                providerConf.query += " AND operatorId:'" + data.operator + "'";
            }
            log.info("data.operator => " + data.operator + "  => " + providerConf.query);
            if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
                providerConf.query += " AND serviceProviderId:" + "\""+ data.serviceProvider+ "\"";
            }
            log.info("data.serviceProvider => " + data.serviceProvider + "  => " + providerConf.query);
            if (data.applicationName != "0" && data.applicationName != undefined) {
                providerConf.query += " AND applicationId:" + data.applicationName;
            }
            log.info("data.applicationName => " + data.applicationName + "  => " + providerConf.query);
            if (data.api != "0" && data.api != undefined) {
                providerConf.query += " AND apiID:" + data.api;
            }

            if (role == "viewer") {
                providerConf.query += ' AND department:"' + department + '"';
            } else if (role == "serviceProvider") {
                providerConf.query += ' AND serviceProvider:"' + serviceProvider + '"';
            }


            var reportName = directory + user.username + FILE_NAME + fileAppend;
            var reportType = "traffic";
            service.generateCSVReport(tableName, providerConf.query, reportName, reportMaxLength, reportType, user.username);
            print({'message': 'Report is generating'});
            var file = new File(userReportDirectory);

            var files = [];
            for (var i = 0; i < file.listFiles().length; i++) {
                if (!file.listFiles()[i].getName().search(user.username+ FILE_NAME)) {
                    files[i] = {"name": file.listFiles()[i].getName(), "index": i};
                }
            }
            print(files);
            return;

        } else if (action == "available") {

            var file = new File(userReportDirectory);

            var files = [];
            for (var i = 0; i < file.listFiles().length; i++) {
                if (!file.listFiles()[i].getName().search(user.username+ FILE_NAME)) {
                    files[i] = {"name": file.listFiles()[i].getName(), "index": i};
                }
            }
            print(files);
            return;

        } else if (action == "get" && request.getParameter("index") != null) {
            var file = new File(userReportDirectory).listFiles()[request.getParameter("index")];
            response.contentType = "application/octet-stream";
            response.addHeader("Content-Disposition", "attachment; filename=" + file.getName());
            print(file.getStream());

        } else if (action == "remove" && request.getParameter("index") != null) {
            var file = new File(userReportDirectory);
            var result = file.listFiles()[request.getParameter("index")].del();
            print({"fileDeleted": result});
            return;
        }
    }

}());

function removeAllFiles(userReportDirectory, reportPrefix1) {
    var file = new File(userReportDirectory);

    for (var i = 0; i < file.listFiles().length; i++) {
        if (!file.listFiles()[i].getName().search(reportPrefix1)) {
            log.info("File " + file.listFiles()[i].getName() + " deleted.");
            var result = file.listFiles()[i].del();
        }
    }
};

%>
